##############################################################
# Kubernetes spec for running the 'climbing comp' application
# https://github.com/jcookin/climbing-comp
##############################################################
---
apiVersion: v1
kind: Namespace
metadata:
  name: climbing-comp
  labels:
    app: climbing-comp
---
# Database Host PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: climbing-comp-data-pvc
  namespace: climbing-comp
  labels:
    app: climbing-comp
spec:
  resources:
    requests:
      storage: 10Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
  storageClassName: ceph-filesystem-ec-1
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: climbing-comp-dashboard-pvc
  namespace: climbing-comp
  labels:
    app: climbing-comp-dashboard
spec:
  resources:
    requests:
      storage: 5Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  storageClassName: ceph-block-ec-1
---
apiVersion: v1
kind: Service
metadata:
  name: climbing-comp-app-svc
  namespace: climbing-comp
  labels:
    app: climbing-comp
spec:
  selector:
    app: climbing-comp-app
  ports:
  - port: 80
    targetPort: http-app
---
apiVersion: v1
kind: Service
metadata:
  name: climbing-comp-dashboard-svc
  namespace: climbing-comp
  labels:
    app: climbing-comp-dashboard
spec:
  selector:
    app: climbing-comp-dashboard
  ports:
  - port: 80
    targetPort: http-grafana
    protocol: TCP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: climbing-comp-ing
  namespace: climbing-comp
  labels:
    app: climbing-comp
  annotations:
    ## tls certificate issuer configurations
    cert-manager.io/cluster-issuer: "letsencrypt"
    ## route-specific configurations for nginx
    nginx.ingress.kubernetes.io/limit-rps: "100"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
      - comp.reclusivy.com
      secretName: climbing-comp-tls
  rules:
  - host: comp.reclusivy.com
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: climbing-comp-app-svc
            port: 
              number: 80
      - pathType: Prefix
        path: "/dashboard"
        backend:
          service:
            name: climbing-comp-dashboard-svc
            port: 
              number: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: climbing-comp-app
  namespace: climbing-comp
  labels:
    app: climbing-comp
spec:
  selector:
    matchLabels:
      app: climbing-comp-app
  template:
    metadata:
      labels:
        app: climbing-comp-app
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
        runAsGroup: 1000
      initContainers:
        - name: permissionset
          image: busybox:latest
          command: [ 'sh', '-c', 'chown -R 1000:1000 /data' ]
          volumeMounts:
            - name: data
              mountPath: /data
          securityContext:
            runAsUser: 0
            allowPrivilegeEscalation: true
            # capabilities:
              # drop: [ "ALL" ]
              # add:
              #   - CAP_FOWNER
            runAsNonRoot: false
            seccompProfile:
              type: RuntimeDefault
      containers:
      - name: app
        image: jcookin/climbing-comp:0.0.5
        env:
          - name: DB_PATH
            value: "/data/"
          - name: DB_NAME
            value: "climbing.db"
          - name: ADMIN_USER
            value: "comp-admin"
          - name: ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: climbing-comp-admin-secret
                key: password
        resources:
          requests:
            memory: "128Mi"
            cpu: 100m
          limits:
            memory: "256Mi"
            cpu: "400m"
        ports:
        - containerPort: 8000
          name: http-app
          protocol: TCP
        volumeMounts:
          - name: data
            mountPath: /data
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
              drop: [ "ALL" ]
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        # readinessProbe:
        #   failureThreshold: 3
        #   httpGet:
        #     path: /
        #     port: 8080
        #     scheme: HTTP
        #   initialDelaySeconds: 10
        #   periodSeconds: 30
        #   successThreshold: 1
        #   timeoutSeconds: 2
        # livenessProbe:
        #   failureThreshold: 3
        #   initialDelaySeconds: 30
        #   periodSeconds: 10
        #   successThreshold: 1
        #   tcpSocket:
        #     port: 8080
        #   timeoutSeconds: 1
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: climbing-comp-data-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: climbing-comp-dashboard
  namespace: climbing-comp
  labels:
    app: climbing-comp-dashboard
spec:
  selector:
    matchLabels:
      app: climbing-comp-dashboard
  template:
    metadata:
      labels:
        app: climbing-comp-dashboard
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
        runAsGroup: 1000
      containers:
      - name: dashboard
        image: grafana/grafana:11.5.2
        env:
          - name: GF_PLUGINS_PREINSTALL
            value: "frser-sqlite-datasource"
          - name: GF_SERVER_SERVE_FROM_SUB_PATH
            value: "true"
          - name: GF_SERVER_ROOT_URL
            value: "https://comp.reclusivy.com/dashboard"
          - name: GF_AUTH_ANONYMOUS_ENABLED
            value: "true"
        resources:
          limits:
            memory: "500Mi"
            cpu: "200m"
        ports:
        - containerPort: 3000
          name: http-grafana
          protocol: TCP
        volumeMounts:
          - name: app-data
            mountPath: /data
            readOnly: true
          - name: grafana-data
            mountPath: /var/lib/grafana
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /robots.txt
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 2
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          tcpSocket:
            port: 3000
          timeoutSeconds: 1
      volumes:
        - name: app-data
          persistentVolumeClaim:
            claimName: climbing-comp-data-pvc
        - name: grafana-data
          persistentVolumeClaim:
            claimName: climbing-comp-dashboard-pvc
---
